lass Solution
{
    private:
    void insertAtTail(Node* &head,Node* &tail,int d){
        Node* newNode=new Node(d);
        if(head==NULL){
            head=newNode;
            tail=newNode;
            return;
        }
        else{
            tail->next=newNode;
            tail=newNode;
        }
    }
    public:
    Node *copyList(Node *head)
    {
        //step1: create a clone list
        Node* cloneHead=NULL;
        Node* cloneTail=NULL;
        
        Node* temp=head;
        while(temp!=NULL){
            insertAtTail(cloneHead,cloneTail,temp->data);
            temp=temp->next;
        }
        
        //step: create a map
        unordered_map<Node*, Node*>oldToNewNode;
        
        Node* originalNode=head;
        Node* cloneNode=cloneHead;
        while(originalNode != NULL && cloneNode!=NULL){
            oldToNewNode[originalNode]=cloneNode;
            originalNode=originalNode->next;
            cloneNode=cloneNode->next;
        }
        // originalNode=head;
        // cloneNode=cloneHead;
        //     while(originalNode!=NULL){
        //         cloneNode->arb=oldToNewNode[originalNode->arb];
        //         originalNode=originalNode->next;
        //         cloneNode=cloneNode->next;
        //     }
        
        //step3: random pointer copy
        temp=head;
        while(temp!=NULL){
            if(temp->next!=NULL){
                temp->next->arb=temp->arb ? temp->arb->next :temp->arb;
            }
            temp=temp->next->next;
        }
        //step4: reveret chnages done i step 2
        originalNode=head;
        cloneNode=cloneHead;
        
        while(originalNode !=NULL && cloneNode!= NULL){
            originalNode->next=cloneNode->next;
            originalNode=originalNode->next;
            
            if(originalNode!=NULL){
                cloneNode->next=originalNode->next;
            }
            cloneNode=cloneNode->next;
        }
            return cloneHead;
    }

};
